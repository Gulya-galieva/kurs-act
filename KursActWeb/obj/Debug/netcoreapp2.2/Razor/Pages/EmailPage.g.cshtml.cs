#pragma checksum "D:\Repos\kurs-act-master\KursActWeb\Pages\EmailPage.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "adb1ea13e80621f2e94ed6473934b5f4ae8435e4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Pages_EmailPage), @"mvc.1.0.razor-page", @"/Pages/EmailPage.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/EmailPage.cshtml", typeof(AspNetCore.Pages_EmailPage), null)]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"adb1ea13e80621f2e94ed6473934b5f4ae8435e4", @"/Pages/EmailPage.cshtml")]
    public class Pages_EmailPage : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "D:\Repos\kurs-act-master\KursActWeb\Pages\EmailPage.cshtml"
  
    ViewData["Title"] = "Управление рассылками";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(145, 207, true);
            WriteLiteral("<div class=\"shadow p-3 mb-1 rounded\" style=\"background-color:#1c2324\"><h1 style=\"color:white; margin:0\"><i class=\"fas fa-mail-bulk\"></i> Настройка рассылок</h1></div>\n\n<div class=\"panel\" id=\"distTable\">\n    ");
            EndContext();
            BeginContext(353, 83, false);
#line 10 "D:\Repos\kurs-act-master\KursActWeb\Pages\EmailPage.cshtml"
Write(await Html.PartialAsync("_EmailDistributionsTable", Model.Configs.DistributionList));

#line default
#line hidden
            EndContext();
            BeginContext(436, 9024, true);
            WriteLiteral(@"
</div>

<script>
    //Отправить письма по рассылке
    function SendEmail(name) {
        Swal.fire({
            title: 'Активировать рассылку сейчас?',
            text: ""Письмо отправится на все указанные адреса"",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            cancelButtonText: 'Отмена',
            confirmButtonText: 'Да, отправить!'
        }).then((result) => {
            if (result.value) {
                //Запрос
                fetch('/EmailConfig/SendEmailDistribution', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: ""name="" + encodeURIComponent(name)
                }).then((response) => {
                    if (response.status === 200) {
                        UpdateEmailDistributionsTable();
                        ok('Письма отправлены: ' + name);
                    } else { err");
            WriteLiteral(@"('Ошибка сервера' + response.statusText); }
                });
            }
        });
    }
    //Запрос на получение списка пользователей по Id роли
    function UpdateEmailDistributionsTable() {
        fetch('/EmailConfig/GetEmailDistributionsTable').then(r => r.text())
            .then(data => {
                $('#distTable').html(data);
            });
    }
    //Запрос на получение списка типов рассылок
    function GetContentTypes() {
        return fetch('/EmailConfig/GetContentTypes').then(r => r.json()).then(t => t);
    }
    //Запрос на получение списка режимов рассылок
    function GetSendTimeMode() {
        return fetch('/EmailConfig/GetSendTimeMode').then(r => r.json()).then(t => t);
    }

    async function ChangeContentType(name) {
        const { value: dType } = await Swal.fire({
            title: 'Выбор содержания письма',
            input: 'select',
            cancelButtonText: 'Отмена',
            inputOptions: GetContentTypes(),
            inputPlaceholder: 'Выбери содержа");
            WriteLiteral(@"ние письма',
            showCancelButton: true,
            inputValidator: (value) => {
                return new Promise((resolve) => {
                    if (value === '') {
                        resolve('Нужно выбрать содержание письма')
                    } else {
                        resolve()
                    }
                })
            }
        })

        if (dType) {
            //Запрос
            fetch('/EmailConfig/SetContentType', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: ""name="" + encodeURIComponent(name) + ""&type="" + encodeURIComponent(dType)
            }).then((response) => {
                if (response.status === 200) {
                    UpdateEmailDistributionsTable();
                    ok('Содержание выбрано успешно');
                } else { err('Ошибка сервера' + response.statusText); }
            });

        }
    }
    //Изменение режима рассылки (расписание)
    ");
            WriteLiteral(@"async function ChangeSendTimeMode(name) {
        const { value: dMode } = await Swal.fire({
            title: 'Выбор режима рассылки',
            input: 'select',
            cancelButtonText: 'Отмена',
            inputOptions: GetSendTimeMode(),
            inputPlaceholder: 'Выбери режим рассылки',
            showCancelButton: true,
            inputValidator: (value) => {
                return new Promise((resolve) => {
                    if (value === '') {
                        resolve('Нужно выбрать режим рассылки')
                    } else {
                        resolve()
                    }
                })
            }
        })

        if (dMode) {
            //Запрос
            fetch('/EmailConfig/SetSendTimeMode', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: ""name="" + encodeURIComponent(name) + ""&mode="" + encodeURIComponent(dMode)
            }).then((response) => {
                i");
            WriteLiteral(@"f (response.status === 200) {
                    UpdateEmailDistributionsTable();
                    ok('Режим установлен успешно');
                } else { err('Ошибка сервера' + response.statusText); }
            });
        }
    }
    //Создать рассылку
    async function AddEmailDistribution() {
        const { value: name } = await Swal.fire({
            title: 'Введи название рассылки',
            input: 'text',
            cancelButtonText: 'Отмена',
            showCancelButton: true,
            inputValidator: (value) => {
                return !value && 'Нужно ввести имя!'
            }
        })
        if (name) {
            //Запрос
            fetch('/EmailConfig/AddEmailDistribution', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: ""name="" + encodeURIComponent(name)
            }).then((response) => {
                if (response.status === 200) {
                    UpdateEmailDistributionsTabl");
            WriteLiteral(@"e();
                    ok('Рассылка успешно создана: ' + name);
                } else { err('Ошибка сервера' + response.statusText); }
            });
        }
    }
    //Удалить рассылку
    function DeleteEmailDistribution(name) {
        Swal.fire({
            title: 'Вы точно ходитет удалить рассылку ""' + name + '""?',
            text: ""Данные удалятся безвозвратно!"",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            cancelButtonText: 'Отмена',
            confirmButtonText: 'Да, удалить рассылку!'
        }).then((result) => {
            if (result.value) {
                //Запрос
                fetch('/EmailConfig/DeleteEmailDistribution', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: ""name="" + encodeURIComponent(name)
                }).then((response) => {
                    if (res");
            WriteLiteral(@"ponse.status === 200) {
                        UpdateEmailDistributionsTable();
                        ok('Рассылка удалена: ' + name);
                    } else { err('Ошибка сервера' + response.statusText); }
                });
            }
        });
    }
    //Создать рассылку
    async function AddEmail(name) {
        const { value: email } = await Swal.fire({
            title: 'Добавление E-mail адреса',
            input: 'email',
            showCancelButton: true,
            inputPlaceholder: 'Введи E-mail адрес'
        })
        if (email) {
            //Запрос
            fetch('/EmailConfig/AddEmail', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: ""name="" + encodeURIComponent(name) + ""&email="" + encodeURIComponent(email)
            }).then((response) => {
                if (response.status === 200) {
                    UpdateEmailDistributionsTable();
                    ok('Рассылка успешно ");
            WriteLiteral(@"создана: ' + name);
                } else { err('Ошибка сервера' + response.statusText); }
            });
        }
    }
    //Удалить рассылку
    function DeleteEmail(name, email) {
        Swal.fire({
            title: 'Удалить адрес ""' + email + '"" из рассылки ""' + name + '""?',
            text: ""Данные удалятся безвозвратно!"",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            cancelButtonText: 'Отмена',
            confirmButtonText: 'Удалить адрес!'
        }).then((result) => {
            if (result.value) {
                //Запрос
                fetch('/EmailConfig/DeleteEmail', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: ""name="" + encodeURIComponent(name) + ""&email="" + encodeURIComponent(email)
                }).then((response) => {
                    if (response.status === 200) ");
            WriteLiteral(@"{
                        UpdateEmailDistributionsTable();
                        ok('Адрес удален: ' + email);
                    } else { err('Ошибка сервера' + response.statusText); }
                });
            }
        });
    }
</script>
<script>
    function ok(text) {
        const Toast = Swal.mixin({
            toast: true,
            position: 'center',
            showConfirmButton: false,
            timer: 3000
        });

        Toast.fire({
            type: 'success',
            title: text
        })
    }
    function err(text) {
        const Toast = Swal.mixin({
            toast: true,
            position: 'center',
            showConfirmButton: false,
            timer: 3000
        });

        Toast.fire({
            type: 'error',
            title: text
        })
    }
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<KursActWeb.Pages.EmailPageModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<KursActWeb.Pages.EmailPageModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<KursActWeb.Pages.EmailPageModel>)PageContext?.ViewData;
        public KursActWeb.Pages.EmailPageModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
