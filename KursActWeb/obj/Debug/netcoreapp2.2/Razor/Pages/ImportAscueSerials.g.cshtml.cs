#pragma checksum "D:\Repos\kurs-act-master\KursActWeb\Pages\ImportAscueSerials.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cd3f21643ad3837228635bff4f8df46dba0f8f17"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Pages_ImportAscueSerials), @"mvc.1.0.razor-page", @"/Pages/ImportAscueSerials.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/ImportAscueSerials.cshtml", typeof(AspNetCore.Pages_ImportAscueSerials), null)]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cd3f21643ad3837228635bff4f8df46dba0f8f17", @"/Pages/ImportAscueSerials.cshtml")]
    public class Pages_ImportAscueSerials : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "D:\Repos\kurs-act-master\KursActWeb\Pages\ImportAscueSerials.cshtml"
  
    ViewData["Title"] = "ImportAscueSerials";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(151, 654, true);
            WriteLiteral(@"<script src=""https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js""></script>

<style>
    .lds-dual-ring {
        display: inline-block;
        width: 64px;
        height: 64px;
        padding-left: 50%;
        padding-top: 70px;
        padding-bottom: 70px;
    }

        .lds-dual-ring:after {
            content: "" "";
            display: block;
            width: 43px;
            height: 43px;
            margin: 1px;
            border-radius: 50%;
            border: 5px solid;
            border-color: rgb(0, 174, 255) transparent rgb(0, 174, 255) transparent;
            animation: lds-dual-ring 1.2s linear infinite;
        }

    ");
            EndContext();
            BeginContext(806, 4021, true);
            WriteLiteral(@"@keyframes lds-dual-ring {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

<style>
    .input-file {
        background: #fff; /* Цвет фона */
        padding: 50px; /* Поля вокруг текста */
        box-shadow: 0 0 10px rgba(0,0,0,0.5); /* Параметры тени */
        height: 200px;
        width: 100%;
        font-size: 100px;
        color: #28a745;
        text-align: center;
        cursor: pointer;
    }

        .input-file:hover {
            box-shadow: 0 0 20px rgba(0,0,0,0.5); /* Параметры тени */
        }
</style>

<div class=""shadow p-3 mb-1 rounded"" style=""background-color:#1c2324""><h1 style=""color:white; margin:0""><i class=""fas fa-cloud-upload-alt""></i> Импорт списка ПУ из ПО АИИС КУЭ</h1></div>


<div id=""app"">
    <div id=""activeArea"">
        <label for=""upload"">
            <i class=""fas fa-file-upload input-file""></i>
            <input id=""upload"" type=""file"" onchange=""handleFiles(this.files)"" class");
            WriteLiteral(@"=""input-file"" style=""display:none"" />
        </label>
    </div>

    <div class=""panel p-3 mt-3"">
        <p>Загружено серийников: {{ serials.length }}</p>
        <p>
            Новые серийники: {{ notCheckedSerials.length }} <i v-if=""notCheckedSerials.length > 0"" class=""fas fa-exclamation-circle"" style=""color:cornflowerblue""></i>
            <a v-if=""serials.length - alreadyCheckedSerials.length > 0"" style=""color:cornflowerblue; cursor:pointer;"" v-on:click=""importFlags""> Принять</a>
        </p>
        <p>Уже отмечены: {{ alreadyCheckedSerials.length }} <i v-if=""alreadyCheckedSerials.length > 0"" class=""fas fa-check"" style=""color:forestgreen""></i></p>
    </div>
    <div class=""panel p-3 mt-3"">
        <p> <i v-if=""serials.length - alreadyCheckedSerials.length > 0"" class=""fas fa-exclamation-circle"" style=""color:cornflowerblue""></i> Список новых серийников: </p>
        <p v-for=""serial in notCheckedSerials"">
            {{ serial.SerialNumber }}
        </p>
    </div>
</div>

<script>
    function handl");
            WriteLiteral(@"eFiles(files) {
        app.handleFiles(files[0]);
    }
    var app = new Vue({
        el: '#app',
        data: {
            serials: []
        },
        computed: {
            alreadyCheckedSerials: function () {
                return this.serials.filter((s) => s.IsAscueOk);
            },
            notCheckedSerials: function () {
                return this.serials.filter((s) => !s.IsAscueOk);
            },
        },
        methods: {
            handleFiles: function (file) {
                let req = new XMLHttpRequest();
                let formData = new FormData();
                formData.append(""file"", file);

                req.onreadystatechange = () => {
                    if (req.readyState === 4 && req.status === 200) {
                        data = JSON.parse(req.responseText);
                        this.serials = data;
                        document.getElementById(""activeArea"").innerHTML = ''
                    }
                }
                req.open(""POST"", '/Import");
            WriteLiteral(@"Data/ParceSerialsIsAscueOk');
                req.send(formData);

                document.getElementById(""activeArea"").innerHTML = '<div class=""lds-dual-ring""></div>';
            },
            importFlags: function () {
                fetch('/ImportData/SetFlagsIsAscueOk', {
                    method: 'POST',
                    headers: {
                      'Accept': 'application/json',
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(this.serials.filter((s) => !s.IsAscueOk))
                }).then((resp) =>
                {
                    if (resp.ok) {
                        this.serials.forEach((item, i, arr) => {
                            item.IsAscueOk = true;
                        });
                        alert('Точки отмечены как принятые в АСКУЭ!');
                    }
                });
            }
        }
    });
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<KursActWeb.Pages.ImportAscueSerialsModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<KursActWeb.Pages.ImportAscueSerialsModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<KursActWeb.Pages.ImportAscueSerialsModel>)PageContext?.ViewData;
        public KursActWeb.Pages.ImportAscueSerialsModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
