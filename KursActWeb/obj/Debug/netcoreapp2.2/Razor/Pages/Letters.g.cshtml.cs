#pragma checksum "D:\Repos\kurs-act-master\KursActWeb\Pages\Letters.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "46a0dd70eaa556856dc8facfc34cfd08ebdd8836"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Pages_Letters), @"mvc.1.0.razor-page", @"/Pages/Letters.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Letters.cshtml", typeof(AspNetCore.Pages_Letters), null)]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"46a0dd70eaa556856dc8facfc34cfd08ebdd8836", @"/Pages/Letters.cshtml")]
    public class Pages_Letters : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "D:\Repos\kurs-act-master\KursActWeb\Pages\Letters.cshtml"
  
    ViewData["Title"] = "Реестры писем";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(135, 7320, true);
            WriteLiteral(@"
<div class=""panel p-3"" id=""reestrsList"">
</div>


<script>
    var currentDate = '_';
    UpdateLetterReestrsList();
    //Запрос таблицы точек учета с письмами и подстановка ее в контейнер
    function UpdateLetterReestrsList() {
        fetch('/Letter/HTML_LetterReestrsList').then((r) => r.text())
            .then((html) => {
                $('#reestrsList').html(html);
                $('[data-toggle=""tooltip""]').tooltip();
            });
    }
    function LoadLettersTable(inviteDate) {
        $('#'+currentDate).html('');
        currentDate = inviteDate;
        fetch('/Letter/HTML_LettersTable?inviteDate=' + inviteDate).then((r) => r.text())
            .then((html) => {
                $('#'+inviteDate).html(html);
                $('[data-toggle=""tooltip""]').tooltip();
            });
    }
    //Очистить показания в актах
    function ClearEnergyFromActs(date) {
        Swal.fire({
            title: 'Очистить все показания на' + date + '?',
            text: ""Это необратимое действие!"",
       ");
            WriteLiteral(@"     type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Да, удалить показания!',
            cancelButtonText: 'Отмена'
        }).then((result) => {
            if (result.value) {
                fetch('/RegPoint/ClearEnergyData', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: ""inviteDate="" + encodeURIComponent(date)
                }).then((response) => {
                    if (response.ok) {
                        LoadLettersTable(date);
                        //UpdateLetterReestrsList();
                        ok('Показания удалены');
                    } else { err('Ошибка сервера' + response.statusText); }
                });
            }
        })
    }

    //Изменить Track номер
    async function UpdateTrackNumber(letterId, currentTrackNum) {
        const { value: trackNum } ");
            WriteLiteral(@"= await Swal.fire({
            title: 'Введите Track номер',
            input: 'text',
            inputValue: currentTrackNum,
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                    return 'Нужно ввести номер!'
                }
            }
        })
        if (trackNum) {
            //Запрос
            fetch('/Letter/UpdateTrackNumber', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: ""id="" + encodeURIComponent(letterId) + ""&newTrackNumber="" + encodeURIComponent(trackNum)
            }).then((response) => {
                if (response.ok) {
                    ok('Track номер изменен');
                    $('#trackNum_' + letterId).html(trackNum);
                } else { err('Ошибка сервера' + response.statusText); }
            });
        }
    }

    //Удалить письмо
    function DeleteLetter(letterId, letterName) {
        Swal.fire({");
            WriteLiteral(@"
            title: 'Удалить письмо №' + letterName + '?',
            text: ""Это необратимое действие!"",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Да, удалить его!',
            cancelButtonText: 'Отмена'
        }).then((result) => {
            if (result.value) {
                fetch('/Letter/Delete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: ""letterId="" + encodeURIComponent(letterId)
                }).then((response) => {
                    if (response.ok) {
                        UpdateLetterReestrsList();
                        ok('Письмо удалено');
                    } else { err('Ошибка сервера' + response.statusText); }
                });
            }
        })
    }
    //Нажатие на иконку Распечатано
    function Switch_LetterPrinted(letterId) {
 ");
            WriteLiteral(@"       SwithRequest('LetterPrinted', letterId, 'Письмо распечатано', 'green');
    }

    //Переключить цвет Серый/Зеленый
    function switchColor(icon, colorNameIfTrue) {
        if (GetFlagStatus(icon)) {
            //Выключаем
            icon.css('color', 'gray');
        } else {
            //Включаем
            icon.css('color', colorNameIfTrue);
        }
    }
    //Получить текущий статус флага (от цвета иконки)
    function GetFlagStatus(icon) {
        return !(icon.css('color').localeCompare('rgb(128, 128, 128)') === 0);
    }
    //Запрос на сервер для изменения флага
    function SwithRequest(flagName, letterId, alertFlagName, colorName) {
        let icon = $('#' + flagName + '_' + letterId);
        //Статус флага
        let newStatus = !GetFlagStatus(icon);
        //Запрос
        fetch('/Letter/Update_' + flagName, {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: ""id="" + encodeURIComponent(letterId) + ""&newsta");
            WriteLiteral(@"tus="" + encodeURIComponent(newStatus)
        }).then((response) => {
            if (response.ok) {
                ok('Флаг ""' + alertFlagName + '"" изменен');
                switchColor(icon, colorName);
            } else { err('Ошибка сервера' + response.statusText); }
        });
    }
</script>

<script>
    function ok(text) {
        const Toast = Swal.mixin({
            toast: true,
            position: 'center',
            showConfirmButton: false,
            timer: 3000
        });

        Toast.fire({
            type: 'success',
            title: text
        })
    }
    function err(text) {
        const Toast = Swal.mixin({
            toast: true,
            position: 'center',
            showConfirmButton: false,
            timer: 3000
        });

        Toast.fire({
            type: 'error',
            title: text
        })
    }
</script>

<script>
    //Всплывающие подсказки
    $(function () {
        $('[data-toggle=""tooltip""]').tooltip()
    })
</script>

<script>
    //");
            WriteLiteral(@" File download helper
    function DownloadFile(caller, downloadUrl, fileName) {
        $.ajax(
            {
                url: downloadUrl,
                method: 'GET',
                xhrFields:
                {
                    responseType: 'blob'
                },
                beforeSend: function() {
                    $(caller).prop('disabled', true);
                    $(caller).find('.spinner-border').removeClass('d-none');
                    $(caller).find('i').addClass('d-none');
                },
                success:
                    function(data) {
                        var a = document.createElement('a');
                        var url = window.URL.createObjectURL(data);
                        a.href = url;
                        a.download = fileName + '.xlsx';
                        a.click();
                        window.URL.revokeObjectURL(url);
                        $(caller).prop('disabled', false);
                        $(caller).find('.spinner-border");
            WriteLiteral("\').addClass(\'d-none\');\n                        $(caller).find(\'i\').removeClass(\'d-none\');\n                    }\n            }\n        );\n    }\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<KursActWeb.Pages.LettersModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<KursActWeb.Pages.LettersModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<KursActWeb.Pages.LettersModel>)PageContext?.ViewData;
        public KursActWeb.Pages.LettersModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
