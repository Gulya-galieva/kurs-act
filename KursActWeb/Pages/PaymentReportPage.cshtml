@page "{id}"
@using DbManager
@model KursActWeb.Pages.PaymentReportPageModel
@{
    ViewData["Title"] = "PaymentReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>

<div class="shadow p-3 mb-1 rounded" style="background-color:#1c2324"><h1 style="color:white; margin:0"> <i class="fas fa-file-contract"></i> Отчет №@Model.PaymentReport.Id - @Model.WorkerName </h1></div>

<style>
    .check-box-border-black::before {
        border-color: #6d6d6d;
    }
</style>

<div id="app">
    @* Галочка "Только проверенные точки" *@
    <div v-if="!IsClosed" class="d-flex justify-content-end">
        <div class="panel p-2 pl-3 mb-1 ml-auto" style="color:black; width:25%; background:#ffc107;">
            <input type="checkbox" id="checkbox" class="form-check-input" v-model="OnlyLinkOk" />
            <label class="form-check-label check-box-border-black" for="checkbox"> Только проверенные</label>
        </div>
    </div>
    <div v-if="!IsClosed" class="panel p-2 pl-3 mb-1 shadow">
        <h4 data-toggle="collapse" data-target="#collapseCurrent" style="cursor:pointer; color:black; margin-bottom:0px;"><i class="fas fa-wallet"></i> Точки учета за текущий период [@Model.Period] - Всего {{ AvailablePointsCount }}</h4>
        <div class="collapse" id="collapseCurrent">
            <table class="table table-hover border mt-2">
                <thead class="thead-dark">
                    <tr>
                        <th>Тип</th>
                        <th>Количество</th>
                        <th>Стоимость (руб.)</th>
                        <th>Работа</th>
                        <th>Включить в отчёт</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="pgr in DataCurrent" class="p-4">
                        <td>{{ pgr.TypeDevice }}</td>
                        <th>{{ pgr.Count }}</th>
                        <td><input class="form-control" v-model="pgr.CostRUB" type="number" /></td>
                        <td>
                            <select v-model="pgr.WorkType" class="form-control">
                                <option disabled value="0">Выберите тип работы</option>
                                <option v-for="workType in WorkTypes" v-bind:value="workType.value">{{workType.name}}</option>
                            </select>
                        </td>
                        <td><input class="form-control" v-model="pgr.ToAddCount" v-on:change="toAddCountChange(pgr)" placeholder="Количество..."></td>
                        <td><i class="far fa-plus-square fa-2x" style="color:cornflowerblue; cursor:pointer;" v-on:click="attachPoints(pgr)"></i></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div v-if="!IsClosed" class="panel p-2 pl-3 mb-4 shadow">
        <h4 data-toggle="collapse" data-target="#collapseOld" style="cursor:pointer; color:black; margin-bottom:0px;"><i class="fas fa-history"></i> Точки учета за прошлые периоды [до @Model.PaymentReport.DatePeriodStart.ToString("dd MMMM yyyy")] - Всего {{ AvailablePointGroupsOldCount }}</h4>
        <div class="collapse" id="collapseOld">
            <table class="table table-hover border mt-2">
                <thead class="thead-dark">
                    <tr>
                        <th>Тип</th>
                        <th>Количество</th>
                        <th>Стоимость (руб.)</th>
                        <th>Работа</th>
                        <th>Включить в отчёт</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="pgr in DataOld" class="p-4">
                        <td>{{ pgr.TypeDevice }}</td>
                        <th>{{ pgr.Count }}</th>
                        <td><input class="form-control" v-model="pgr.CostRUB" type="number" /></td>
                        <td>
                            <select v-model="pgr.WorkType" class="form-control">
                                <option disabled value="0">Выберите тип работы</option>
                                <option v-for="workType in WorkTypes" v-bind:value="workType.value">{{workType.name}}</option>
                            </select>
                        </td>
                        <td><input class="form-control" v-model="pgr.ToAddCount" v-on:change="toAddCountChange(pgr)" placeholder="Количество..."></td>
                        <td><i class="far fa-plus-square fa-2x" style="color:cornflowerblue; cursor:pointer;" v-on:click="attachPoints(pgr)"></i></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="panel p-2 pl-3 shadow">
        <div class="d-flex justify-content-between pr-3">
            <h4 style="color:black"><i class="far fa-file-alt"></i> Отчет №@Model.PaymentReport.Id [@Model.Period] - Всего {{AddedPointsCount}}</h4>
            <div class="d-flex flex-column">
                <a href="/GetFile/GetExcel_PaymentReport/@Model.PaymentReport.Id" data-toggle="tooltip" data-placement="top" title="Скачать отчет Excel" class=" text-center"><i class="fas fa-file-excel fa-2x text-success"></i></a>
                <p class=" text-center">Скачать</p>
            </div>
        </div>
        <div v-for="pgr in AddedPointsGroups">
            <h4><strong>{{ pgr.TypeDevice }}: </strong> <span> {{ pgr.Count }}</span></h4>
            <table class="table">
                <tr v-for="p in pgr.Points">
                    <td>{{ p.RegionName }}</td>
                    <td>{{ p.SubstationName }}</td>
                    <td>{{ WorkTypesNames[p.WorkType].name }}</td>
                    <td>{{ p.OAddress }}</td>
                    <td>{{ p.Serial }}</td>
                    <td v-if="p.IsLinkOk">
                        <i class="fas fa-check-circle text-success"></i>
                    </td>
                    <td v-else></td>
                    <td>{{ p.CostRUB }} руб.</td>
                    <td><i v-if="!IsClosed" class="far fa-trash-alt text-danger" style="cursor:pointer;" v-on:click="removePoint(p.RegPointId)"></i></td>
                </tr>
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <th>Кол-во: {{ pgr.Count }}</th>
                    <th>Сумма: {{ costRUBSumm(pgr.Points) }} руб.</th>
                </tr>
            </table>
        </div>
    </div>
    <div class="d-flex justify-content-between">
        <a v-if="!IsClosed" href="#" class="text-danger" onclick="Delete(@Model.PaymentReport.Id)"><i class="far fa-trash-alt text-danger"></i> Удалить отчет</a>
        @if (User.IsInRole("administrator"))
        {   
            <a v-if="!IsClosed" href="#" class="btn btn-info" v-on:click="closeReport()">Закрыть отчет</a>
            <a v-if="IsClosed" href="#" class="btn btn-info" v-on:click="openReport()">Открыть отчет</a>
        }
    </div>
</div>


<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip();
        $('.tooltip-here').tooltip();
    });
</script>

<script>
    //Init app
    var app = new Vue({
        el: '#app',
        data: {
            WorkTypes: [/*{ value: 0, name: '-' },*/ { value: 1, name: 'Монтаж' }, /*{ value: 2, name: 'Демонтаж' },*/ { value: 3, name: 'ПНР' }],
            WorkTypesNames: [{ value: 0, name: '-' }, { value: 1, name: 'Монтаж' }, { value: 2, name: 'Демонтаж' }, { value: 3, name: 'ПНР' }],
            LinkStatusNames: ['не отв.', 'отв.'],
            IsClosed: @Model.PaymentReport.IsClosed.ToString().ToLower(),
            OnlyLinkOk: true,
            DataCurrent: [],
            DataOld: [],
            AvailablePointGroups: [],
            AvailablePointGroupsOldPeriods: [],
            AddedPointsGroups: [],
        },
        computed: {
            AvailablePointsCount: function () {
                if (!this.DataCurrent) return 0;
                let count = 0;
                this.DataCurrent.forEach(gr => {
                    count += gr.Points.length;
                });
                return count;
            },
            AvailablePointGroupsOldCount: function () {
                if (!this.DataOld) return 0;
                let count = 0;
                this.DataOld.forEach(gr => {
                    count += gr.Points.length;
                });
                return count;
            },
            AddedPointsCount: function () {
                if (!this.AddedPointsGroups) return 0;
                let count = 0;
                this.AddedPointsGroups.forEach(gr => {
                    count += gr.Points.length;
                });
                return count;
            }
        },
        methods: {
            toAddCountChange: function (gr) {
                if (gr.ToAddCount > gr.Count) gr.ToAddCount = gr.Count;
                if (gr.ToAddCount < 0) gr.ToAddCount = 0;
                gr.ToAddCount = Math.round(gr.ToAddCount);
            },
            attachPoints: (pointsGroup) => AddToReport(pointsGroup),
            removePoint: (regPointId) => RemovePoint(@Model.PaymentReport.Id, regPointId),
            costRUBSumm: (points) => {
                let summ = 0;
                points.forEach((item) => summ += item.CostRUB)
                return summ;
            },
            closeReport: () => {
                Swal.fire({
                    title: 'Вы уверены?',
                    text: "После закрытия отчет невозможно будет редактировать!",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Да, закрыть отчет!'
                }).then((result) => {
                    if (result.value) {
                        fetch('/PaymentReport/Close/@Model.PaymentReport.Id', { method: 'POST' })
                            .then(r => {
                                if (r.ok) {
                                    app.IsClosed = true;
                                    ok('Отчет успешно закрыт');
                                }
                            });
                    }
                });
            },
            openReport: () => {
                Swal.fire({
                    title: 'Открыть отчет для редактирования?',
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Открыть'
                }).then((result) => {
                    if (result.value) {
                        fetch('/PaymentReport/Open/@Model.PaymentReport.Id', { method: 'POST' })
                            .then(r => {
                                if (r.ok) {
                                    app.IsClosed = false;
                                    ok('Отчет успешно открыт');
                                }
                            });
                    }
                });
            }
        },
        watch: {
            OnlyLinkOk: function (val) {
                if (val) {
                    this.DataCurrent = [];
                    this.AvailablePointGroups.forEach((item, i, arr) => {
                        this.DataCurrent.push(Object.assign({}, item));
                    });
                    this.DataCurrent.forEach((item, i, arr) => {
                        item.Points = item.Points.filter((_point, i, arr) => _point.IsLinkOk);
                        item.Count = item.Points.length;
                        item.ToAddCount = item.Points.length;
                        item.TypeDevice = item.TypeDevice + '✔';
                    });
                }
                else {
                    this.DataCurrent = this.AvailablePointGroups;
                }
                if (val) {
                    this.DataOld = [];
                    this.AvailablePointGroupsOldPeriods.forEach((item, i, arr) => {
                        this.DataOld.push(Object.assign({}, item));
                    });
                    this.DataOld.forEach((item, i, arr) => {
                        item.Points = item.Points.filter((_point, i, arr) => _point.IsLinkOk);
                        item.Count = item.Points.length;
                        item.ToAddCount = item.Points.length;
                        item.TypeDevice = item.TypeDevice + '✔';
                    });       
                }
                else {
                    this.DataOld = this.AvailablePointGroupsOldPeriods;
                }
                if (val) { ok('Отображаются только проверенные точки'); } else { ok('Отображаются все точки'); }
            }
        }
    });

    //LoadData
    update();

    function update() {
        UpdateAviablePoints(@Model.PaymentReport.WorkerId);
        UpdateAddedPoints(@Model.PaymentReport.Id);
    }

    function UpdateAviablePoints(workerId) {
        fetch('/PaymentReport/GetWorkerAvailablePoints_Json/' + workerId)
        .then(r => r.json())
            .then(data => {
                let _availablePointGroups = [];
                let _availablePointGroupsOldPeriods = [];
                data.forEach((item, i, arr) => {
                    let currentReportDate = new Date(@Model.PaymentReport.DatePeriodStart.Year, @Model.PaymentReport.DatePeriodStart.Month-1, @Model.PaymentReport.DatePeriodStart.Day);
                    //Из текущего периода
                    let currentPeriodPoints = item.Points.filter((_point, i, arr) => {
                        let _date = new Date(_point.PeriodYear, _point.PeriodMonth-1, _point.PeriodDay);
                        return (_date.getDay() === currentReportDate.getDay() &&
                            _date.getMonth() === currentReportDate.getMonth() &&
                            _date.getFullYear() === currentReportDate.getFullYear());
                    });
                    //Из старого
                    let oldPeriodPoints = item.Points.filter((_point, i, arr) => {
                        let _date = new Date(_point.PeriodYear, _point.PeriodMonth-1, _point.PeriodDay);
                        return _date < currentReportDate;
                    });

                    _availablePointGroups
                        .push({ TypeDevice: item.TypeDevice, Points: currentPeriodPoints, Count: currentPeriodPoints.length, ToAddCount: currentPeriodPoints.length, WorkType: 0, CostRUB: 0 });
                    _availablePointGroupsOldPeriods
                        .push({ TypeDevice: item.TypeDevice, Points: oldPeriodPoints, Count: oldPeriodPoints.length, ToAddCount: 0, WorkType: 0, CostRUB: 0  });
                });
                app.AvailablePointGroups = _availablePointGroups;
                app.AvailablePointGroupsOldPeriods = _availablePointGroupsOldPeriods;
                app.OnlyLinkOk = false;
            });
    }
    function UpdateAddedPoints(reportId) {
        fetch('/PaymentReport/GetPointsGroups_Json/' + reportId)
            .then(r => r.json())
            .then(data => app.AddedPointsGroups = data);
    }
</script>

<script>
    function AddToReport(pointsGroup) {
        if (!pointsGroup.WorkType || pointsGroup.WorkType === 0) {
            err('Выберите тип работ');
            return;
        }
        pointsGroup.Id = @Model.PaymentReport.Id;
        pointsGroup.Points = pointsGroup.Points.slice(-pointsGroup.ToAddCount);
        console.log(pointsGroup);

        fetch('/PaymentReport/AttachPoints', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(pointsGroup)
        })
            .then(r => {
                if (r.ok) {
                    ok('Точки усешно добавлены в отчёт');
                    update();
                }
            });
    }
    function RemovePoint(reportId, rpId) {
        fetch('/PaymentReport/RemovePoint?reportId=' + reportId + '&regPointId=' + rpId, { method: 'POST' })
            .then(r => {
                if (r.ok) {
                    update();
                    ok('Точка учета убрана из отчета');
                } else { err('Ошибка сервера'); }
            });
    }

    //Удалить отчет
    function Delete(id) {
        Swal.fire({
            title: 'Удалить отчёт №' + id + '?',
            type: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Удалить'
        }).then((result) => {
            if (result.value) {
                fetch('/PaymentReport/Delete/' + id, { method: 'POST' })
                    .then(r => {
                        if (r.ok) {
                            ok('Отчет удален успешно');
                            document.location = '/PaymentReports';
                        }
                    });
            }
        });
    }
</script>